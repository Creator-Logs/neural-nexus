"use client";
import Footer from "@/app/components/ui/footer/footer";
import Navbar from "@/app/components/ui/navbar/navbar";
import { ModelTitle } from "../model-components/modetitle";
import LLMImage from "../../../assets/ModelBg/LLM-Text-Classification-Large.png";
import { Label } from "../../../components/ui/label";
import { cn } from "@/utils/cn";
import { Textarea } from "../../../components/ui/textarea";
import { useState, ChangeEvent, ClipboardEvent } from "react";
import React from "react";
import { Progress } from "@/app/components/ui/progress";

export default function Model() {
  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    console.log("Form submitted");
  };
  const [text, setText] = useState<string>(""); // State variable with string type
  const maxWords: number = 1000; // Maximum word limit
  const handleChange = (event: ChangeEvent<HTMLTextAreaElement>): void => {
    const newText: string = event.target.value;
    // Split text by spaces to count words
    const words: string[] = newText.trim().split(/\s+/);
    if (words.length <= maxWords) {
      setText(newText);
    } else {
      // Truncate text if word limit exceeded
      setText(words.slice(0, maxWords).join(" "));
    }
  };
  const handlePaste = (event: ClipboardEvent<HTMLTextAreaElement>): void => {
    event.preventDefault();
    const pasteText: string = event.clipboardData.getData("text");
    // Combine current text and pasted text
    const newText: string = text + pasteText;
    // Split combined text by spaces to count words
    const words: string[] = newText.trim().split(/\s+/).slice(0, maxWords);
    setText(words.join(" "));
  };
  const handleKeyDown = (
    event: React.KeyboardEvent<HTMLTextAreaElement>
  ): void => {
    // Prevent space, enter, and tab key presses if word limit is reached
    const words: string[] = text.trim().split(/\s+/);
    if (words.length >= maxWords) {
      if (event.key === " " || event.key === "Enter" || event.key === "Tab") {
        event.preventDefault();
      }
    }
  };
  const currentWordCount: number =
    text.trim() === "" ? 0 : text.trim().split(/\s+/).length;

  return (
    <>
      <Navbar />
      <ModelTitle
        modelImage={LLMImage}
        modelSubtitle="Was the essay written by an LLM or Human?"
        modelTitle="LLM Generated Text Detection"
        modelCategory="Natural Language"
      />
      <section className="w-screen h-auto bg-black">
        <div className="px-32 pt-48">
          <h3 className="text-white text-3xl tracking-tight leading-none font-medium">
            Is the text generated by an LLM?
          </h3>
          <h6 className="text-white font-regular pt-3">
            Paste your content below, and weâ€™ll tell you likely it is that it
            has been generated by an LLM
          </h6>
        </div>
        <div className="flex py-16 px-32">
          <div className="w-2/3 border rounded-xl border-dark-gray rounded-none px-6 mr-16 shadow-input bg-white dark:bg-black">
            <form className="my-4 w-full" onSubmit={handleSubmit}>
              <LabelInputContainer className="mb-8">
                <Label className="py-2.5" htmlFor="essay">
                  Check for AI generated Text
                </Label>
                <Textarea
                  onChange={handleChange}
                  onPaste={handlePaste}
                  onKeyDown={handleKeyDown}
                  className="h-80"
                  placeholder="Enter your message"
                  value={text}
                ></Textarea>
              </LabelInputContainer>
              <div className="flex justify-between items-center">
                <div>
                  <p className="text-white font-regular">Word Count</p>
                  <p className="text-gray font-light">
                    {currentWordCount}/{maxWords} words
                  </p>
                </div>
                <button
                  className="hover:opacity-[0.8] relative group/btn bg-dark-gray block dark:bg-dark-gray w-56 text-white rounded-md h-10 font-medium shadow-[0px_1px_0px_0px_#ffffff40_inset,0px_-1px_0px_0px_#ffffff40_inset] dark:shadow-[0px_1px_0px_0px_var(--zinc-800)_inset,0px_-1px_0px_0px_var(--zinc-800)_inset]"
                  type="submit"
                >
                  Send
                </button>
              </div>
            </form>
          </div>
          <div className="w-1/3">
            <h5 className="text-xl text-white tracking-tight font-semibold">
              Results
            </h5>

            {Preds.map((item) => (
              <div key={item.id} className="h-16 py-8">
                <div className="flex justify-between items-center">
                  <h6 className="text-blue-gray pb-2">{item.class}</h6>
                  <p className="text-blue-gray font-light">
                    {item.prediction}%
                  </p>
                </div>
                <Progress value={item.prediction} className="w-[100%]" />
              </div>
            ))}
          </div>
        </div>
      </section>
      <section className="w-screen h-screen bg-white"></section>
      <Footer />
    </>
  );
}

const LabelInputContainer = ({
  children,
  className,
}: {
  children: React.ReactNode;
  className?: string;
}) => {
  return (
    <div className={cn("flex flex-col space-y-2 w-full", className)}>
      {children}
    </div>
  );
};

const Preds = [
  { id: 1, class: "Large-Language Model", prediction: 0 },
  { id: 2, class: "Student", prediction: 0 },
];
